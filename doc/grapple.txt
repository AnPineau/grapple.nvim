M.create_autocmds()                                          *M.create_autocmds*
    Initialize autocommand groups and events


M.update_autocmds()                                          *M.update_autocmds*
    Update autocommand correct file patterns


M.create_commands()                                          *M.create_commands*


GrappleConfig                                                    *GrappleConfig*

    Fields: ~
        {log_level}  ()


M.default()                                                          *M.default*
    The default configuration for grapple.nvim

    Returns: ~
        {GrappleConfig}


M.get({key_string})                                                      *M.get*
    Attempt to find a configuration option from a dot-delimited key.

    Parameters: ~
        {key_string}  (string)

    Returns: ~
        {string}


M.load({opts?}, {force?})                                               *M.load*
    Initialize configuration.

    Parameters: ~
        {opts?}   (GrappleConfig)
        {force?}  (boolean)


M.validate()                                                        *M.validate*


M.setup({opts?})                                                       *M.setup*
    PLugin entrypoint.

    Parameters: ~
        {opts?}  (GrappleConfig)


M.jump_forward()                                                *M.jump_forward*
    Jump to the next marked buffer in the jumplist.


M.jump_backward()                                              *M.jump_backward*
    Jump to the previous marked buffer in the jumplist.


M._jump_forward({project_root})                                *M._jump_forward*

    Parameters: ~
        {project_root}  (string)


M._jump_backward({project_root})                              *M._jump_backward*

    Parameters: ~
        {project_root}  (string)


log.new()                                                              *log.new*


Mark                                                                      *Mark*

    Fields: ~
        {file_path}  (string)
        {cursor}     (table)


M.mark({opts})                                                          *M.mark*
    Mark a buffer.

    Parameters: ~
        {opts}  ({buffer?:number,index?:number,name?:string}|nil)


M.unmark({opts})                                                      *M.unmark*
    Unmark a buffer.

    Parameters: ~
        {opts}  ({buffer?:number,name?:string,index?:number})


M.toggle({opts})                                                      *M.toggle*
    Toggle a mark.

    Parameters: ~
        {opts}  ({buffer?:number,name?:string,index?:number})


M.select({opts})                                                      *M.select*
    Select a mark.

    Parameters: ~
        {opts}  ({buffer?:number,name?:string,index?:number})


M.reset()                                                              *M.reset*
    Reset marks for the current project.


M.default()                                                          *M.default*


M.load()                                                                *M.load*


M.save({save_path})                                                     *M.save*
    Save marks to a persisted file.

    Parameters: ~
        {save_path}  (string)


M.reset_marks()                                                  *M.reset_marks*


M.create_mark()                                                  *M.create_mark*


M.delete_mark()                                                  *M.delete_mark*

    Returns: ~
        {nil}


M.update_mark()                                                  *M.update_mark*

    Returns: ~
        {nil}


M.select_mark()                                                  *M.select_mark*

    Returns: ~
        {nil}


M.find_mark()                                                      *M.find_mark*

    Returns: ~
        {Mark|nil}


M.find_key()                                                        *M.find_key*

    Returns: ~
        {string|number|nil}


M.marked_files({project_root})                                  *M.marked_files*
    Get a list of marks for a given project

    Parameters: ~
        {project_root}  (string)

    Returns: ~
        {table}


M.serialize({state})                                               *M.serialize*
    Serialize a lua table as json idempotently.

    Parameters: ~
        {state}  (table|string)

    Returns: ~
        {string}


M.deserialize({serialized_state})                                *M.deserialize*
    Deserialize a json blob into a lua table idempotently.

    Parameters: ~
        {serialized_state}  (table|string)

    Returns: ~
        {table}


M.save({save_path}, {state})                                            *M.save*
    Save a lua table to a given file.

    Parameters: ~
        {save_path}  (string)
        {state}      (table)

    Returns: ~
        {nil}


M.load({save_path})                                                     *M.load*
    Load a lua table from a given file.

    Parameters: ~
        {save_path}  (string)

    Returns: ~
        {table}


M.file_exists({file_path})                                       *M.file_exists*
    Check whether a file exists.

    Parameters: ~
        {file_path}  (string)

    Returns: ~
        {boolean}


vim:tw=78:ts=8:noet:ft=help:norl:
